
2) Write a Smart Contract and demonstrate the steps
involved in the process of compilation using Hardhat
Development Environmen .


Ans:-  1st  of all that we need to create  a project  in  a any drive of our PC .
 
STEP 1 - open Powershell and  write the command  
                            mkdir Hardhat_projectE
 then enter the root directory Hardhat_projectE
STEP 2 -   next step is npm init 
                        for Json File 
STEP 3- install hardhat  in below command 
                 npm install --save -dev hardhat
step - 4- for hardhat configuration file we need to access below command 
                   npx hardhat init  


npw we got a development envinoment 
 -  Writing Smart Contracts:
Start by creating a new file called Token.sol .
 

//SPDX-License-Identifier: MIT
//Solidity files have to start with this pragma.
//it will be used by the Solidity compiler to validate its version.
pragma solidity ^0.8.19;
//this is the main building block for smart contracts.
contract Token {
    string public name = "my Hardhat Token";
    string public symbol = "MHT";
    //This fixed amount of tokens .
    uint256 public totalSupply = 1000000 ;
    //an address type variable is used to store ethereum accounts.
    address public owner ;
    //a mapping is akey/value map. here we store each account's balance.
    mapping(address => uint256) balances;
    
    event Transfer(address indexed _from, address indexed _to,uint256 _value);
    
    constructor() {
        //the totalSupply is assigned to the transaction sender , which is the
        //account that is deploying the contract .
        balances[msg.sender] = totalSupply;
        owner = msg.sender;
     }
      

    function transfer(address to, uint256 amount) external{
         
        require(balances[msg.sender] >= amount,"not enough tokens");
        //transfer the amount
        balances[msg.sender] -= amount;
        balances[to] += amount ;
 
        emit Transfer(msg.sender, to, amount);
    }

    
    function balanceOf(address account) external view returns (uint256) {
    return balances[account];
    }

}


after  write the smart contarct we need to put the commond 

          npx hardhat compile 

then see the result  
PS C:\Users\admin\Hardhat_Token> npx hardhat compile
Compiled 2 Solidity files successfully (evm target: paris).
PS C:\Users\admin\Hardhat_Token>
